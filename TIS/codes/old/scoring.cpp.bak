#include "scoring.h"
using namespace std;


Str dist(Str Out, motif ref, motif que, Str GenoID, int len, double tthr, double sthr) {
	Ofs out(Out.data(), ios_base::app);
	bool RBS = false;
	for (int i = 0; i < que.rwm.size(); i++) {
		Str SD = "AAGGAGGTGA";
		double sd = SD_distance(SD, que.rwm[i], len);
		double ta = TA_distance(ref.rwm[0], que.rwm[i], len + 1);
		double nc = 0;
		out << GenoID << "\tMotif" << i + 1;
		if (sd < sthr && ta < tthr)
			out << "\tAmbiguous";
		else if (sd < sthr && ta >= tthr) {
			out << "\tCanonical RBS";
			RBS = true;
		}
		else if (sd >= sthr && ta < tthr)
			out << "\tCannonical Leaderless";
		else {
			SD = "CTCTTTAACAATTTAT";
			nc = SD_distance(SD, que.rwm[i], len);
			if (nc > sd && sd < 8.0) {
				if (RBS)
					out << "\tAtypical (SD degenerated)";
				else
					out << "\tCanonical RBS";
			}
			else if (nc < sd && nc < 8.0)
				out << "\tNon-canonical RBS";
			else
				out << "\tAtypical";
		}
		out << "\t" << sd << "\t" << ta << "\t" << nc << endl;
	}
	out.close();
	return "The distances to SD and TATA standard signal have been calculated!";
}

double SD_distance(Str SD, Ve_Ma_C_D que, int len) {
	double result = 1000;
	for (int i = 0; i < que.size() - len + 1; i++) {
		for (int j = 0; j < SD.length() - len + 1; j++) {
			double score = 0;
			for (int k = 0; k < len; k++) {
				score -= log(que[i + k][SD[j + k]]) / log(2.0);
				//cout << "\t" << que[i + k][SD[j + k]];
			}
			if (score < result)
				result = score;
			//cout << i << "\t" << SD.substr(j, len) << "\t" << score << "\t" << result << endl;
		}
	}
	return result;
}

double TA_distance(Ve_Ma_C_D ref, Ve_Ma_C_D que, int len) {
	double result = 1000;
	for (int i = 0; i < ref.size() - len + 1; i++) {
		for (int j = 0; j < que.size() - len + 1; j++) {
			double score = 0;
			for (int k = 0; k < len; k++) {
				for (int l = 0; l < Base.length(); l++) {
					//cout << ref.size() << "\t" << Base.length() << "\t" << i << "\t" << j << endl;
					score += (que[j + k][Base[l]] - ref[i + k][Base[l]]) * (que[j + k][Base[l]] - ref[i + k][Base[l]]);
				}
			}
			if (score < result)
				result = score;
		}
	}
	return result;
}

Str specialize(Str Out, motif ref, motif que, Str GenoID, int len, double tthr, double sthr) {
	Ofs out(Out.data(), ios_base::app);
	for (int i = 0; i < que.rwm.size(); i++) {
		Str SD = "AAGGAGGTGA";
		out << GenoID << "\tMotif" << i + 1;
		double sd = SD_distance(SD, que.rwm[i], len);
		double nc = TA_distance(ref.rwm[0], que.rwm[i], len + 1);
		double ta = TA_distance(ref.rwm[1], que.rwm[i], len + 1);
		if (sd < 4)
			out << "\tCanonical RBS";
		else if (nc < sthr && ta < tthr)
			out << "\tAmbiguous";
		else if (nc < sthr && ta >= tthr)
			out << "\tNon-canonical RBS";
		else if (nc >= sthr && ta < tthr)
			out << "\tNon-canonical Leaderless";
		else {
			ta = TA_distance(ref.rwm[2], que.rwm[i], len + 1);
			if (ta < 2)
				out << "\tCanonical Leaderless";
			else
				out << "\tAtypical";
		}
		out << "\t" << nc << "\t" << ta << "\t" << sd << endl;
	}
	out.close();
	return "The distances to SD and TATA standard signal have been calculated!";
}


Str tis_record(Str Out, Str Que, Ma_Str_Str fa, rec red, motif mot, Ma_Str_Ve_Str dis, int len) {
	Out += red.Genome + ".tis.rec.dat";
	Ofs out(Out.data());
	int utr = 0;
	Ma_Str_S sinfo = prob(fa, mot, dis[Que]);
	out << "Genomic Accession\tStrand\tLocus\tGene Name\tProduct\tGene Start\tGene End\tTIS Annotation Reference\tTIS shift (5\'-,3\'+)"
		<< "\tExperimentally Verified TSS (Position|5\'UTR Length|Phase|Reference)\tExperimentally Verified TTS (Position|Phase|Reference)"
		<< "\tExperimentally Verified Leaderless TIS (Position|5\'End Length)\tOperon ID\tRole of TSSs\tRole of TTSs"
		<< "\tTranscription Initiation Signal\tTranscription Signal Type\tTranscription Signal Probability"
		<< "\tTranscription Signal Start\tTranscription Signal Sequence" << endl;
	for (int i = 0; i < red.order.size(); i++) {
		Str Synonym = red.order[i];
		//cout << Synonym << "\t";
		//if (!fa[Synonym].empty() && fa[Synonym] != "Error!")
		out << red.record[Synonym].Replicon << "\t" << red.record[Synonym].Strand << "\t" << Synonym
			<< "\t" << red.record[Synonym].Name << "\t" << red.record[Synonym].Product
			<< "\t" << red.record[Synonym].start << "\t" << red.record[Synonym].end
			<< "\t" << red.record[Synonym].TISRef;
		if (red.record[Synonym].shift)
			out << "\t" << red.record[Synonym].shift;
		else
			out << "\tNA";
		if (!red.record[Synonym].tss.empty()) {
			for (Ma_I_S::const_iterator iter = red.record[Synonym].tss.begin(); iter != red.record[Synonym].tss.end(); iter++) {
				if (iter == red.record[Synonym].tss.begin())
					out << "\t" << iter->first << "|" << iter->second.utr;
				else
					out << ";" << iter->first << "|" << iter->second.utr;
				for (Se_Str::const_iterator ite = iter->second.phase.begin(); ite != iter->second.phase.end(); ite++) {
					if (ite == iter->second.phase.begin())
						out << "|" << *ite;
					else
						out << "&" << *ite;
				}
				for (Se_Str::const_iterator ite = iter->second.ref.begin(); ite != iter->second.ref.end(); ite++) {
					if (ite == iter->second.ref.begin())
						out << "|" << *ite;
					else
						out << "&" << *ite;
				}
			}
		}
		else
			out << "\tNA";
		if (!red.record[Synonym].tts.empty()) {
			for (Ma_I_S::const_iterator iter = red.record[Synonym].tts.begin(); iter != red.record[Synonym].tts.end(); iter++) {
				if (iter == red.record[Synonym].tts.begin())
					out << "\t" << iter->first;
				else
					out << ";" << iter->first;
				for (Se_Str::const_iterator ite = iter->second.phase.begin(); ite != iter->second.phase.end(); ite++) {
					if (ite == iter->second.phase.begin())
						out << "|" << *ite;
					else
						out << "&" << *ite;
				}
				for (Se_Str::const_iterator ite = iter->second.ref.begin(); ite != iter->second.ref.end(); ite++) {
					if (ite == iter->second.ref.begin())
						out << "|" << *ite;
					else
						out << "&" << *ite;
				}
			}
		}
		else
			out << "\tNA";
		if (!red.record[Synonym].ldl.empty()) {
			for (Ma_I_I::const_iterator ite = red.record[Synonym].ldl.begin(); ite != red.record[Synonym].ldl.end(); ite++) {
				if (ite == red.record[Synonym].ldl.begin())
					out << "\t" << ite->first << "|" << ite->second;
				else
					out << ";" << ite->first << "|" << ite->second;
			}
		}
		else
			out << "\tNA";
		if (red.record[Synonym].opr)
			out << "\t" << red.record[Synonym].opr;
		else
			out << "\tNA";
		if (!red.record[Synonym].TSS.empty())
			out << "\t" << red.record[Synonym].TSS;
		else if (!red.record[Synonym].tss.empty())
			out << "\tVerified TSS";
		else
			out << "\tNA";
		if (!red.record[Synonym].TTS.empty())
			out << "\t" << red.record[Synonym].TTS;
		else
			out << "\tNA";
		if (!sinfo[Synonym].Name.empty()) {
			out << "\t" << sinfo[Synonym].Name << "\t" << sinfo[Synonym].Type << "\t" << sinfo[Synonym].pb
				<< "\t" << sinfo[Synonym].start << "\t" << sinfo[Synonym].Seq << endl;
		}
		else
			out << "\tNA\tNA\tNA\tNA\tNA" << endl;
	}
	out.close();
	return "All information about " + red.Genome + " have been recorded!";
}

Ma_Str_S prob(Ma_Str_Str fa, motif mot, Ve_Str dis) {
	Ma_Str_S result;
	for (Ma_Str_Str::iterator iter = fa.begin(); iter != fa.end(); iter++) {
		scan temp;
		temp.pb = temp.sc = 0;
		double sum, lsc;
		int lst = 0;
		sum = lsc = 0;
		for (int i = 0; i < mot.rwm.size(); i++) {
			double pb = 0;
			for (int j = 0; j < mot.pj[i].size(); j++) {
				double sc = 1;
				sc *= mot.pj[i][j];
				//cout << sc << "\t" << i << "\t" << j << endl;
				for (int k = 0; k < mot.rwm[i].size(); k++)
					sc *= mot.rwm[i][k][iter->second[j + k]] / mot.pb[iter->second[j + k]];
				//cout << sc << "\t" << i << "\t" << j << endl;
				if (sc > lsc) {
					lsc = sc;
					lst = j;
				}
				pb += sc;
			}
			sum += pb;
			if (pb > temp.pb) {
				temp.pb = pb;
				temp.sc = lsc;
				int w = mot.rwm[i].size();
				int d = mot.pj[i].size();
				temp.start = lst - w - d + 1;
				temp.Seq = iter->second.substr(lst, w);
				temp.Type = dis[i];
				int a = i + 1;
				Str N;
				convertFromNumber(N, a);
				temp.Name = "Signal" + N;
			}
		}
		//cout << temp.pb << "\t" << temp.sc << endl;
		sum += mot.p0;
		if (temp.pb > mot.p0)
			temp.pb /= sum;
		else {
			temp.pb = mot.p0 / sum;
			temp.sc = 0;
			temp.Seq = "NA";
			temp.start = 0;
			temp.Name = "None";
			temp.Type = "NA";
		}
		result[iter->first] = temp;
	}
	return result;
}

Str ortholog_statistics(Str Out, Str Ori, Str Que, Ma_Str_R ori, Ma_Str_R que, Ma_Str_Ma_Str_O orth) {
	//cout << ori.size() << "\t" << que.size() << "\t" << orth.size() << endl;
	Ofs out(Out.data(), ios_base::app);//TATA, SDTA, SDSD, TASD;
	Ifs in(Out.data());
	if (!in)
		out << "Origin Genome\tQuery Genome\tCannonical to Cannonical\tCannonical to Leaderless\tLeaderless to Cannonical\tLeaderless to Leaderless\tDistance (log2)\tDistance (ln)\tDistance (lg)" << endl;
	Ma_Str_I counts;
	for (Ma_Str_R::const_iterator iter = que.begin(); iter != que.end(); iter++) {
		for (Ma_Str_R::const_iterator ite = ori.begin(); ite != ori.end(); ite++) {
			//cout << iter->first << "\t" << ite->first << endl;
			if (!orth[iter->first][ite->first].OID.empty()) {
				//cout << iter->first << "\t" << ite->first << "\t" << iter->second.Type << "\t" << ite->second.Type << endl;
				counts[iter->second.Type + ite->second.Type] ++;
			}
		}
	}
	double deno = counts["CannonicalCannonical"] * counts["LeaderlessLeaderless"] - counts["CannonicalLeaderless"] * counts["LeaderlessCannonical"];
	double bsd = counts["CannonicalCannonical"] + counts["CannonicalLeaderless"];
	double esd = counts["CannonicalCannonical"] + counts["LeaderlessCannonical"];
	double eta = counts["CannonicalLeaderless"] + counts["LeaderlessLeaderless"];
	double bta = counts["LeaderlessCannonical"] + counts["LeaderlessLeaderless"];
	double dist2, diste, dist10;
	dist2 = diste = dist10 = 0;
	//cout << deno << "\t" << bsd << "\t" << esd << "\t" << eta << "\t" << bta << endl;
	if (fabs(deno * bsd * esd * eta * bta) > 1.0e-3) {
		dist2 = -0.25 * (2 * log2(abs(deno)) - log2(bsd) - log2(esd) - log2(eta) - log2(bta));
		diste = -0.25 * (2 * log2(abs(deno)) - log2(bsd) - log2(esd) - log2(eta) - log(bta));
		dist10 = -0.25 * (2 * log10(abs(deno)) - log10(bsd) - log10(esd) - log10(eta) - log10(bta));
	}
	out << Ori << "\t" << Que << "\t" << counts["CannonicalCannonical"] << "\t" << counts["CannonicalLeaderless"] << "\t" << counts["LeaderlessCannonical"]
		<< "\t" << counts["LeaderlessLeaderless"] << "\t" << dist2 << "\t" << diste << "\t" << dist10 << endl;
	out.close();
	return "Statistics of orthologous genes have been finished!";
}

Str signal_statistics(Str Out, Str Ori, Ma_Str_R ori) {
	Ofs out(Out.data());
	out << "Genome ID\tCannonical TIS Genes\tLeaderless TIS Genes\tNon-TIS Genes\tAtypical TIS Genes\tTotal Genes" << endl << Ori;
	Ma_Str_I counts;
	for (Ma_Str_R::const_iterator iter = ori.begin(); iter != ori.end(); iter++)
		counts[iter->second.Type] ++;
	for (Ma_Str_I::const_iterator ite = counts.begin(); ite != counts.end(); ite++) {
		if (counts["Cannonical"] > 0)
			out << counts["Cannonical"];
		else
			out << 0;
		if (counts["Leaderless"] > 0)
			out << "\t" << counts["Leaderless"];
		else
			out << "\t" << 0;
		if (counts["None"] > 0)
			out << "\t" << counts["None"];
		else
			out << "\t" << 0;
		if (counts["Atypical"] > 0)
			out << "\t" << counts["Atypical"];
		else
			out << "\t" << 0;
		out << "\t" << ori.size() << endl;
	}
	out.close();
	return "Statistics of cannonical and leaderless signals have been finished!";
}

Str motif2fasta(Str Out, Str GenoID, motif mot, int depth) {
	Str Log = Out + "WebLOGO.sh";
	Ofs log(Log.data(), ios_base::app);
	for (int i = 1; i <= mot.rwm.size(); i++) {
		Str Num;
		convertFromNumber(Num, i);
		Str Output = Out + GenoID + ".Signal" + Num + ".fa";
		log << "./weblogo\t-F png\t--fontsize 10\t-c classic\t--number-interval 1\t--resolution 1200\t--composition \"{";
		for (int l = 0; l < Base.length(); l++) {
			int pb = mot.pb[Base[l]] * 10000 + 0.5;
			if (!l)
				log << "\'" << Base[l] << "\':" << pb / 100.0;
			else
				log << ", \'" << Base[l] << "\':" << pb / 100.0;
		}
		log << "}\"\t< " << Output << " >\t" << Output << ".png" << endl;
		Ofs out(Output.data());
		for (int j = 0; j < depth; j++) {
			out << ">" << j + 1 << endl;
			for (int k = 0; k < mot.rwm[i - 1].size(); k++) {
				double thr = 0;
				for(int l = 0; l < Base.length(); l ++){
					thr += mot.rwm[i - 1][k][Base[l]];
					if (j < depth * thr || l == Base.length() - 1) {
						//cout << j << "\t" << k << "\t" << mot.rwm[i - 1][k][Base[l]] << "\t" << thr << "\t" << thr * depth << endl;
						out << Base[l];
						break;
					}
				}
			}
			out << endl;
		}
		out.close();
	}
	log.close();
	return "Motifs of " + GenoID + " have been transfered to fasta!";
}

Str max_entropy(Str Out, motif ref, Str GenoID) {
	Ofs out(Out.data(), ios_base::app);
	out << GenoID;
	double sum = 0;
	for (int i = 0; i < ref.entropy.size(); i++) {
		out << "\t" << ref.entropy[i];
		sum += ref.entropy[i];
	}
	out << "\t" << sum << "\t" << sum / ref.entropy.size() << endl;
	out.close();
	return "Motifs of " + GenoID + " have been listed!";
}
